// Checkpoint 6: Car struct
struct Car {
    enum ShiftDirection: String {
        case up = "up", down = "down"
    }
    
    enum Gear: Int {
        case neutral, first, second, third, fourth, fifth
        
        mutating func shift(_ direction: Car.ShiftDirection) {
            print("Shifting \(direction)")
            switch direction {
            case .up:
                shiftUp(direction, currentGear: self)
            case .down:
                shiftDown(direction, currentGear: self)
        }
            
        func shiftDown(_ direction: ShiftDirection, currentGear: Gear) {
            self = Gear(rawValue: rawValue - 1) ?? self
            shiftError(direction.rawValue, isSameGear: self == currentGear)
        }
        
        func shiftUp(_ direction: ShiftDirection, currentGear: Gear) {
            self = Gear(rawValue: rawValue + 1) ?? self
            shiftError(direction.rawValue, isSameGear: self == currentGear)
        }
    
        func shiftError(_ direction: String, isSameGear: Bool) {
            if isSameGear {
                print("Cannot shift \(direction); already in \(self).")
            }
        }
    }
}
    
    let model: String
    let numberOfSeats: Int
    var currentGear: Gear = .neutral
}

var myCar = Car(model: "Honda", numberOfSeats: 5)

print("Car model: \(myCar.model)")
print("Starting gear: \(myCar.currentGear)")
myCar.currentGear.shift(.up)
print("Current gear: \(myCar.currentGear)")
myCar.currentGear.shift(.down)
myCar.currentGear.shift(.down)

myCar.currentGear.shift(.up)
myCar.currentGear.shift(.up)
myCar.currentGear.shift(.up)
print("Current gear: \(myCar.currentGear)")
myCar.currentGear.shift(.up)
myCar.currentGear.shift(.up)
print("Current gear: \(myCar.currentGear)")
myCar.currentGear.shift(.up)
